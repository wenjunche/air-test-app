<?xml version="1.0"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                       creationComplete="app_creationCompleteHandler(event)" backgroundColor="white" showStatusBar="false"
                       width="700" height="500"
>
    <fx:Script><![CDATA[
        import fin.desktop.RuntimeConfiguration;
        import fin.desktop.RuntimeLauncher;
        import fin.desktop.System;
        import fin.desktop.connection.DesktopConnection;

        import mx.core.UIComponent;

        import mx.events.FlexEvent;

        import org.osmf.net.StreamType;

        import spark.components.mediaClasses.DynamicStreamingVideoItem;
        import spark.components.mediaClasses.DynamicStreamingVideoSource;

        [Bindable]
        private var nc:NetConnection;
        [Bindable]
        private var ns:NetStream;
        private var remoteVideo:Video;

        protected var runtimeLauncher:RuntimeLauncher;
        private var openfinSystem:fin.desktop.System;
        private var desktopConnection:DesktopConnection;
        [Bindable]
        private var connectedToOpenFin:Boolean = false;
        private var _cam:DynamicStreamingVideoSource = new DynamicStreamingVideoSource();
        private var _dynVideoSource:DynamicStreamingVideoSource;

        protected function app_creationCompleteHandler(event:FlexEvent):void {
            connectedToOpenFin = false;
            NativeApplication.nativeApplication.addEventListener(Event.EXITING, onExit);

            RuntimeConfiguration.enableFileLogging("testAirApp.log");
            RuntimeConfiguration.enableTraceLogging();
        }

        protected function btn_connectHandler(event:MouseEvent):void {
            var cfg:RuntimeConfiguration = new RuntimeConfiguration("Flex Rtmp Proxy");
            cfg.runtimeVersion = "8.56.27.43";
            cfg.additionalRuntimeArguments = "--v=1 --no-sandbox";
            cfg.onConnectionReady = onConnectionReady;
            cfg.onConnectionError = onConnectionError;
            cfg.onConnectionClose = onConnectionClose;
            cfg.connectionTimeout = 15000;
            runtimeLauncher = new RuntimeLauncher(cfg);

/*
            var request:URLRequest = new URLRequest("http://localhost:8081/icon.png");
            request.method = URLRequestMethod.GET;
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(Event.COMPLETE, onGetComplete);
            loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            loader.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            loader.dataFormat = URLLoaderDataFormat.BINARY;
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("loader.load error", error);
            }
*/
        }

        private function onConnectionReady():void {
            connectedToOpenFin = true;
            launchButton.enabled = false;
            openfinSystem = new fin.desktop.System();
            openfinSystem.addEventListener("proxy-socket-auth-requested", onProxySocketAuth);

            trace("Connection Successful!");
        }

        private function onConnectionError(reason:String = null):void {
            trace("Connection failed", reason);
        }

        private function onConnectionClose(reason:String = null):void {
            trace("Connection close", reason);
        }

        private function onExit(event:Event):void {
            trace("Exiting");
        }

        protected function btn_disconnectHandler(event:MouseEvent):void {
            fin.desktop.System.getInstance().exit(function () {
                trace("exit success callback");
            });
        }

        protected function connect(url:String):void {
            NetConnection.defaultObjectEncoding = ObjectEncoding.AMF0; // MUST SUPPLY THIS!!!
            openfinSystem.createProxySocket({url: url}, onProxySocketCreated);
        }

        protected function onProxySocketAuth(event:Object) {
            username.enabled = true;
            password.enabled = true;
            login.enabled = true;
            trace("Proxy auth requested", event.url);
        }

        protected function loginProxy(url:String, username:String, password:String) {
            openfinSystem.authenticateProxySocket({url: url, username: username, password: password});
        }

        protected function onProxySocketCreated(data:Object):void {
            if (data.hasOwnProperty('proxyUrl')) {
                var proxyUrl:String = data.proxyUrl;
                localUrl.text = proxyUrl;
                if (nc == null) {
                    nc = new NetConnection();
                    nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);
                    nc.addEventListener(IOErrorEvent.IO_ERROR, errorHandler, false, 0, true);
                    nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler, false, 0, true);
                    nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, errorHandler, false, 0, true);
                    nc.client = {};
                    trace('connect() ' + proxyUrl);
                    nc.connect(proxyUrl);
                }
            }
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            trace('netStatusHandler() ' + event.type + ' ' + event.info.code);
            switch (event.info.code) {
                case 'NetConnection.Connect.Success':
                    break;
                case 'NetConnection.Connect.Failed':
                case 'NetConnection.Connect.Reject':
                case 'NetConnection.Connect.Closed':
                    nc = null;
                    closeStream();
                    break;
            }
        }

        private function errorHandler(event:ErrorEvent):void {
            trace('errorHandler() ' + event.type + ' ' + event.text);
            if (nc != null)
                nc.close();
            nc = null;
            closeStream();
        }

        protected function publish(name:String, record:Boolean):void {
            if (ns == null && nc != null && nc.connected) {
                ns = new NetStream(nc);
                ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);
                ns.addEventListener(IOErrorEvent.IO_ERROR, streamErrorHandler, false, 0, true);
                ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, streamErrorHandler, false, 0, true);
                ns.client = {};

                _dynVideoSource = new DynamicStreamingVideoSource();
                var videoItems:Vector.<DynamicStreamingVideoItem>;
                videoItems = new Vector.<DynamicStreamingVideoItem>();
                videoItems[0] = new DynamicStreamingVideoItem();
                _dynVideoSource.host = "";
                _dynVideoSource.streamType = StreamType.LIVE;
                _dynVideoSource.streamItems = videoItems;
                local.source = _dynVideoSource;
                var cam:Camera = Camera.getCamera(); //Camera.names[0]);
                cam.setMode(640, 480, 15);
                cam.setQuality(0, 80);
                local.videoObject.attachCamera(cam);

                ns.publish(name, record ? 'record' : null);
                ns.attachCamera(Camera.getCamera());
                ns.attachAudio(Microphone.getMicrophone(-1));
            }
        }

        private function play(name:String):void {
            if (ns == null && nc != null && nc.connected) {
                ns = new NetStream(nc);
                ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);
                ns.addEventListener(IOErrorEvent.IO_ERROR, streamErrorHandler, false, 0, true);
                ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, streamErrorHandler, false, 0, true);
                ns.client = {};
                ns.play(name);
                remoteVideo.attachNetStream(ns);
            } else {
                trace('Not ready to play');
            }
        }

        private function streamErrorHandler(event:ErrorEvent):void {
            trace('streamErrorHandler() ' + event.type + ' ' + event.text);
            closeStream();
        }

        private function closeStream():void {
            if (ns != null) {
                ns.close();
                ns = null;
            }
            remoteVideo.clear();
            if (local.videoObject != null) {
                local.videoObject.attachCamera(null);
            }
        }

        private function localCreated():void {
            var ui:UIComponent = new UIComponent();
            remoteVideo = new Video(160, 120);
            ui.width = 160;
            ui.height = 120;
            remoteVideo.width = 160;
            remoteVideo.height = 120;
            ui.addChild(remoteVideo);
            this.videoBox.addElement(ui);
        }

        private function closeNetConnection():void {
            trace('close()');
            if (nc != null) {
                nc.close();
                nc = null;
                closeStream();
            }
        }

        protected function retrieve(url:String):void {
            openfinSystem.createProxySocket({url: url}, onProxySocketCreated2);
        }

        protected function onProxySocketCreated3(data:Object):void {
            if (data.hasOwnProperty('proxyUrl')) {
                var proxyUrl:String = data.proxyUrl;
                resourceLocalUrl.text = proxyUrl;
                var request:URLRequest = new URLRequest(proxyUrl);
                request.method = URLRequestMethod.GET;
                var loader:URLLoader = new URLLoader();
                loader.addEventListener(Event.COMPLETE, onGetComplete);
                loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
                loader.addEventListener(ProgressEvent.PROGRESS, progressHandler);
                loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
                loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
                loader.dataFormat = URLLoaderDataFormat.BINARY;
                loader.load(request);
            }
        }

        protected function onProxySocketCreated2(data:Object):void {
            if (data.hasOwnProperty('proxyUrl')) {
                var proxyUrl:String = data.proxyUrl;
                resourceLocalUrl.text = proxyUrl;
                var socket:Socket = new Socket();
                socket.addEventListener(Event.CONNECT, connectHandler);
                socket.addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);
                socket.connect("localhost", data.localPort);
            }
        }

        public function connectHandler(event:Event):void {
            trace("Connected");
        }

        public function socketDataHandler(event:ProgressEvent):void {
            trace("socketDataHandler");
            var socket:Socket = event.target as Socket;
            //Read the message from the socket
            var message:String = socket.readUTFBytes(socket.bytesAvailable);
            trace("Received: " + message);
        }

        function onGetComplete(event:Event):void {
            trace("onGetComplete", event.target.data);
        }

        function httpStatusHandler(e:Event):void {
            trace("httpStatusHandler:" + e);
        }

        function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        function ioErrorHandler(e:Event):void {
            trace("ioErrorHandler: " + e);
        }

        function securityErrorHandler(e:Event):void {
            trace("securityErrorHandler:" + e);
        }
        ]]></fx:Script>
    <s:Label  left="10" top="10" right="10" fontWeight="bold" fontSize="13" textAlign="center">RTMP Proxy Socket Demo</s:Label>
    <s:Button id="launchButton" left="10" top="40" enabled="{!connectedToOpenFin}" click="btn_connectHandler(event)" label="Connect to OpenFin"/>
    <s:HGroup left="10" top="80" verticalAlign="middle">
        <s:Label text="NetConnection"/>
        <s:TextInput id="urlText" text="rtmps://rtmp.openf.in/myapp" width="200" enabled="{nc == null &amp;&amp; connectedToOpenFin}"/>
        <s:Button label="Connect" click="connect(urlText.text)" enabled="{nc == null &amp;&amp; connectedToOpenFin}"/>
        <s:Button label="Close" click="closeNetConnection()" enabled="{nc != null}"/>
        <s:TextInput id="localUrl" text="" width="200" enabled="false"/>
    </s:HGroup>
    <s:HGroup left="10" top="120" verticalAlign="middle">
        <s:Label text="Proxy Auth"/>
        <s:TextInput id="username" text="" width="200" enabled="false"/>
        <s:TextInput id="password" text="" width="200" enabled="false"/>
        <s:Button id="login" label="Login" click="loginProxy(urlText.text, username.text, password.text)" enabled="false"/>
    </s:HGroup>
    <s:HGroup left="10" top="160" verticalAlign="middle">
        <s:Label text="NetStream"/>
        <s:TextInput id="streamText" text="user1" toolTip="Stream name to publish or play" enabled="{nc != null}"/>
        <s:CheckBox id="recordCheckBox" label="Enable recording" toolTip="Only valid if publishing"/>
        <s:Button label="Publish" click="publish(streamText.text, recordCheckBox.selected)" enabled="{nc != null &amp;&amp; ns == null}"/>
        <s:Button label="Play" click="play(streamText.text)" enabled="{nc != null &amp;&amp; ns == null}"/>
        <s:Button label="Close" click="closeStream()" enabled="{nc != null &amp;&amp; ns != null}"/>
    </s:HGroup>

    <s:HGroup id="videoBox" left="10" top="160" verticalAlign="middle">
        <s:VideoDisplay id="local" creationComplete="localCreated()" width="160" height="120" />
    </s:HGroup>

    <s:HGroup left="10" top="330" verticalAlign="middle">
        <s:Label text="NetResource"/>
        <s:TextInput id="resourceUrl" text="https://cdn.openfin.co/hello/img/openfin.ico" width="200" enabled="{connectedToOpenFin}"/>
        <s:Button label="Connect" click="retrieve(resourceUrl.text)" enabled="{connectedToOpenFin}"/>
        <s:TextInput id="resourceLocalUrl" text="" width="200" enabled="false"/>
    </s:HGroup>


</s:WindowedApplication>
